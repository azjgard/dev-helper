const path = require('path');
const ls   = require('ls');
const fs   = require('fs');
const colors = require('colors');

const commonPath        = path.join(__dirname, 'app/templates/common/');
const templatePath      = path.join(__dirname, 'app/templates');
const path_dependencies = path.join(commonPath, 'dependencies.js');

function generateMiddlewareExports(options) {} 

generateMiddlewareExports.prototype.apply = function(compiler) {
  //after plugins are done, but before code compiles
  compiler.plugin("after-plugins", params => {
    getDirectories(templatePath)
      .then(buildExportString)
      .then(outputDependencyFile);
  });
};

// we need to build an array that has a list of all file objects
// inside of the template directory, EXCEPT for the common folder,
// which should be excluded.
function getDirectories(path) {
  let directories = [];
  for (let file of ls(path + '/*')) {
    let isCommon            = file.name === 'common';
    let isDir               = file.stat.isDirectory();

    if (!isCommon && isDir) {
      directories.push(file);
    }
  }
  return Promise.resolve(directories);
}

// now that we have all of the folders that contain our desired data,
// we need to sift through them and build a JSON string that we can
// write to file to be used in the rest of our webpack build. Since
// the file is going to be generated every time that the user runs webpack,
// we need to also include a warning against editing the file by hand.
function buildExportString(directories) {
  let exportString =
`// **************************
// -- DO NOT EDIT THIS FILE --
// --------------------------
// This file is automatically 
// generated by a custom webpack
// plugin, and handles all 
// template dependencies for you.
// Any changes you make to this 
// file will be overwritten the
// next time that you build.
// --------------------------
// **************************

module.exports = {`;

  for (let i = 0; i < directories.length; i++) {
    let directory = directories[i];
    let key       = `\n  ${directory.name}: {\n`;
    let path      = `    name : '${directory.name}',\n`;
    let fn        = `    fn   : require('../${directory.name}/middleware.js')\n`;
    let cap       = `  }`;

    exportString += (key + path + fn + cap);

    // to ensure that our output is valid JSON, we only want to
    // append a comma after each value that is not the last key-value
    // pair in our object.
    if (i < directories.length - 1) { exportString += ','; }
  }

  exportString += '\n};';
  
  return Promise.resolve(exportString);
}

function outputDependencyFile(exportString) {
  fs.writeFile(path_dependencies, exportString, err => {
    if (err) throw err;
    else {
      let p = String(path_dependencies.split('app')[1]).gray;
      let b = 'built'.green;
      console.log(`Template dependencies generated:\n  ${p} [${b}]\n`);
    }
  });
}

module.exports = generateMiddlewareExports;
