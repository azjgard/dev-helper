const path = require('path');
const ls   = require('ls');
const fs   = require('fs');
const colors = require('colors');

function generateMiddlewareExports(options) {} 

generateMiddlewareExports.prototype.apply = function(compiler) {
  compiler.plugin("after-plugins", function(params) {
    let commonPath     = path.join(__dirname, 'app/templates/common/');
    let templatePath   = path.join(__dirname, 'app/templates');
    let fileName       = 'dependencies.js';

    // we need to build an array that has a list of all file objects
    // inside of the template directory, EXCEPT for the common folder,
    // which should be excluded.
    let directories = [];

    for (let file of ls(templatePath + '/*')) {
      let isCommon            = file.name === 'common';
      let isDir               = file.stat.isDirectory();

      if (!isCommon && isDir) {
	directories.push(file);
      }
    }

    // now that we have all of the folders that contain our desired data,
    // we need to sift through them and build a JSON string that we can
    // write to file to be used in the rest of our webpack build. Since
    // the file is going to be generated every time that the user runs webpack,
    // we need to also include a warning against editing the file by hand.
    let exportString =
	  `// **************************
// -- DO NOT EDIT THIS FILE --
// --------------------------
// This file is automatically 
// generated by a custom webpack
// plugin, and handles all 
// template dependencies for you.
// Any changes you make to this 
// file will be overwritten the
// next time that you build.
// --------------------------
// **************************\n\n`;

    exportString += 'module.exports = {';

    for (let i = 0; i < directories.length; i++) {
      let directory = directories[i];

      exportString += `\n  ${directory.name}: require('../${directory.name}/middleware.js')`;
      if (i < directories.length - 1) {
	exportString += ',';
      }
    }

    exportString += '\n};';

    let finalPathName = path.join(commonPath, fileName);

    fs.writeFile(finalPathName, exportString, err => {
      if (err) throw err;
      else console.log('Template dependencies generated:\n  ' +
		       String(finalPathName.split('app')[1]).gray +
		       ' [built]'.green + '\n');
    });

  });
};

module.exports = generateMiddlewareExports;
