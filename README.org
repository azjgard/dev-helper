* Setting up a local version
1. Ensure that [[https://nodejs.org][NodeJS]] is installed globally (along with [[https://docs.npmjs.com/getting-started/what-is-npm][NPM]])
2. Clone and enter this repository
   #+BEGIN_SRC sh
     git clone https://github.com/azjgard/web-requests
     cd web-requests/
   #+END_SRC
3. Install the Node dependencies
   #+BEGIN_SRC sh
     npm install
   #+END_SRC
4. Build the code
   #+BEGIN_SRC sh
     npm run build
   #+END_SRC
5. Upload the 'app' folder as a Chrome Extension 
   - navigate to chrome://extensions
   - click the "Developer mode" check box at the top of the page
   - click the "Load unpacked extension" button that shows up
   - navigate to the app folder of the repository you cloned
   - click "OK"
6. Navigate to [[http://avondale-iol/][the old course site]] and open a slide to see the tool work automatically
* Development
1. Run the following command in the command line to begin development. This will cause a rebuild of the project to occur every time a file is changed and saved.
  #+BEGIN_SRC sh
    npm run watch
  #+END_SRC
2. The local chrome extension will have to be reloaded whenever the project is rebuilt. This can be done by going to chrome://extensions and clicking "Reload" under the title of the chrome extension.
* Updating the extension on the Chrome Web Store
** Creating the zip file
1. After saving all changes to your code, increment the version number in the app/manifest.json file
2. Zip up the app folder
3. Place the zip file inside the web-requests/releases folder and rename the file to an appropriate name
  
** Uploading the zip file
1. Navigate to the [[https://chrome.google.com/webstore/developer/dashboard][Chrome Web Store Developer Dashboard]] and sign in with your username and password
2. Click the edit button on the Dev Helper Prototype extension
3. Click "Upload Updated Package" near the top of the screen
4. Click "Choose File" and navigate to the web-requests/releases folder
5. Choose the new zip file, click Open, and click Upload
6. Update any other information you want to
7. Scroll to the bottom and click publish changes

** Waiting for the update
- The update could take up to 60 minutes, but it usually takes no more than 10. You can see if the new extension has been published by going to your Developer Dashboard and looking at the "Status" column.
- Once the chrome extension is fully published/updated, all users with this chrome extension will have their extension updated.
  
* Where is the code and documentation? (Github?)
  - You can pull down the code and documentation from https://github.com/azjgard/dev-helper. You can store a copy in the J: drive for convenience.

* Bugs
  - choosing zero bullet points on the old slide page for image slides deletes the ending tag of the <BulletPointList> tag as well
  - runs commands before it has all the needed information for the introduction slide if computer is too slow
  - sometimes the narration is the same for two slides in a row
* Not Quite Finished
  - save to drive somewhere (need a server script) - there is a chrome api that can send it to the computer's downloads folder.
* Functions from Template class (used in middleware.js files)
Legend
- (r) means required
- (o) means optional
** $template.createNode(obj)
1. Description - creates a new node
2. Parameters 
   - obj
     - newNode       : (r) node to create (string)
     - referenceNode : (r) node related to the newNode (see 'type' key below)(string),
     - type          : (r) where you want the newNode to go relative to the referenceNode (prepend, append, after, before)(string)
     - text          : (o) text to be placed in node (string)
     - attr          : (o) an array of objects that have a "name" and "value" property (array)
#+BEGIN_SRC js
let obj = {
    newNode       : 'Text',
    referenceNode : 'Header',
    type          : 'after'
    text          : 'This is text',
    attr          : [
      { name  : 'Cool', value : 'strange' },
      { name  : 'food', value : 'I love apple pies sooooo much!!! :D' }
    ]
};
$template.createNode(obj);
#+END_SRC

** $template.removeNode(nodeToRemove, position, referenceNode)
1. Description - removes a node
2. Parameters 
   - nodeToRemove - (r)(string)
   - position - (r)where the node is relative to the referenceNode (after, before, child)(string)
   - referenceNode - (r)node used to clarify which node to remove (string)
#+BEGIN_SRC js
  $template.removeNode('Text', 'after', 'Header');
#+END_SRC

** $template.setTxt(node, text)
1. Description - set the inner text of a node
2. Parameters 
   - node - (r)node to edit (string)
   - text - (r)text to insert (string)
#+BEGIN_SRC js
  $template.setTxt("Instructions", "I love changing this stuff around");
#+END_SRC

** $template.setAttr(node, name, value)
1. Description - edit an existing attribute of a node
2. Parameters 
   - node - (r)node to edit (string)
   - name - (r)attribute to edit (string)
   - value - (r)new value of the attribute (string)
#+BEGIN_SRC js
  $template.setAttr("Header", "do-you-like-cheese", "I do...I really think I do...");
#+END_SRC

** $template.finish()
1. Description - send finished xml template to the front end
#+BEGIN_SRC js
  $template.finish();
#+END_SRC

# * Notes
# Below are notes on what things to search for in different xml slides.
# Done:
# AD105 - Analog Circuits, Digital Circuits, Wire Harnesses
# -----------------------------------------------------------------

# click on circles
# initial instructions (title) or instructions (id)
# textitem with id=calloutText#
# callout# (id) for callouts (might be titles in new slide)

# click on blocks on left
# Initial scene text (title) or instructionstext (id)
# <Text> with id=text1 goes with operation0 and so on

# click on tabs at bottom
# initial scene text (title) or operationText0 (id)
# all id's are operationText1 and operationStep1 (etc.)

# click on parts of car shaded by yellow
# initial instructions (title) or instructions (id)
# desc1,2,3,etc. for descriptions (id)
# id=callout# gets the title as well...no definite way to grab the correct one

# click on pictures at left that have tabs in them
# <textItem title="Instructions" desc="" id="instructions"
# <title title="Initial Scene Title" desc="" id="title">

# <title title="Scene 1 - Title" desc="" id="title">
# <title title="Scene 1 - Tab 1 - Title" desc="" id="title">
# <text title="Scene 1 - Tab 1 - Text" desc="" id="text">
# <title title="Scene 1 - Tab 2 - Title" desc="" id="title">
# <text title="Scene 1 - Tab 2 - Text" desc="" id="text">


